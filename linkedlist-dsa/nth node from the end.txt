import java.util.Scanner;

class Node {
    int data;
    Node next;

    Node(int value) {
        data = value;
        next = null;
    }
}

class LinkedList {
    private Node head;

    LinkedList() {
        head = null;
    }

    void insertAtEnd(int value) {
        Node newNode = new Node(value);

        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    void findNthNodeFromEnd(int n) {
        if (head == null) {
            System.out.println("There is no nth node in the list");
            return;
        }

        Node slowPtr = head;
        Node fastPtr = head;

        // Move the fast pointer n positions ahead
        for (int i = 0; i < n; i++) {
            if (fastPtr == null) {
                System.out.println("There is no nth node in the list");
                return;
            }
            fastPtr = fastPtr.next;
        }

        while (fastPtr != null) {
            slowPtr = slowPtr.next;
            fastPtr = fastPtr.next;
        }

        System.out.println(slowPtr.data + " is the nth node element in the list");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();
        Scanner scanner = new Scanner(System.in);
        int num;

        while (true) {
            num = scanner.nextInt();
            if (num < 0) {
                break;
            }
            linkedList.insertAtEnd(num);
        }

        System.out.println("Enter the nth node:");
        int n = scanner.nextInt();
        linkedList.findNthNodeFromEnd(n);
    }
}
